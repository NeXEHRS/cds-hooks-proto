//module to treat files in Node.js
const fs=require('fs');

// CQL-exec-fhir
const cqlfhir=require('$cqlExecFhir/lib/fhir');
const cqlfvs=require('$fhirSupportTools/lib/fhir-valueset-service');
// Code setting up the CQL library, executor, etc, and getting the patient data as a bundle
const cql = require('$cqlExecution/lib/cql');

// Set up the library
const elm=JSON.parse(fs.readFileSync('$elmJsonFile'));
const libraries = {
    FHIRHelpers: JSON.parse(fs.readFileSync('$fhirHelpersJson/FHIRHelpers.json', 'utf8'))
};
const lib = new cql.Library(elm, new cql.Repository(libraries));

// Set up valuesets
const vsdef=elm.library.valueSets.def;
const cqlvs=new cqlfvs.ValueSetExchange();
const valueset=JSON.parse(cqlvs.invoke(vsdef));
const codeService=new cql.CodeService(valueset);
//const wfs=codeService.findValueSetsByOid('NSAIDs');
//console.log(JSON.stringify(wfs, undefined, 2));

// patient01
const patient01=require('$inputBundleFile');
// Executor
//const patientSource = cqlfhir.PatientSource.FHIRv300();
const patientSource = cqlfhir.PatientSource.FHIRv401();
patientSource.loadBundles([patient01]);

const executor = new cql.Executor(lib, codeService);
executor
  .exec(patientSource)
  .then(result => {
    console.log(JSON.stringify(result, undefined, 2));
  })
  .catch(err => {
    console.error(err);
  });
